
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.gxml;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser_gxml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser_gxml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser_gxml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser_gxml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\012\000\002\005\004" +
    "\000\002\005\003\000\002\006\013\000\002\006\012\000" +
    "\002\007\004\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\004\000\002\011\003\000\002\012\012" +
    "\000\002\012\013\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\004\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\011\000\002\020\004\000\002" +
    "\020\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\033\012\000" +
    "\002\034\004\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\013\000\002\036\011\000\002\037\004\000" +
    "\002\037\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\041\013\000\002\041\011" +
    "\000\002\042\004\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\022" +
    "\013\000\002\022\012\000\002\023\004\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\031\004\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\025\013\000\002" +
    "\025\012\000\002\026\004\000\002\026\003\000\002\027" +
    "\011\000\002\027\010\000\002\030\012\000\002\030\012" +
    "\000\002\030\010\000\002\044\005\000\002\045\005\000" +
    "\002\046\005\000\002\047\005\000\002\050\005\000\002" +
    "\051\005\000\002\051\005\000\002\052\005\000\002\052" +
    "\005\000\002\053\005\000\002\053\005\000\002\054\005" +
    "\000\002\054\005\000\002\055\005\000\002\055\005\000" +
    "\002\056\005\000\002\057\005\000\002\060\005\000\002" +
    "\060\005\000\002\061\005\000\002\061\005\000\002\062" +
    "\005\000\002\062\005\000\002\063\005\000\002\063\005" +
    "\000\002\064\005\000\002\064\005\000\002\065\005\000" +
    "\002\066\005\000\002\067\005\000\002\070\005\000\002" +
    "\070\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\004\044\006\001\002\000\006\002\ufffb\044" +
    "\ufffb\001\002\000\004\002\u011b\001\002\000\004\005\011" +
    "\001\002\000\006\002\000\044\006\001\002\000\006\002" +
    "\ufffc\044\ufffc\001\002\000\014\022\021\023\014\024\017" +
    "\025\016\026\023\001\002\000\016\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\046\ufff2\001\002\000\016\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\046\ufff4\001\002\000" +
    "\004\047\u0119\001\002\000\016\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\046\ufff3\001\002\000\004\047\u0117\001" +
    "\002\000\004\047\u0115\001\002\000\016\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\046\ufff7\001\002\000\004\047" +
    "\u0113\001\002\000\016\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\046\ufff6\001\002\000\004\047\u0111\001\002\000" +
    "\016\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\046\ufff5" +
    "\001\002\000\016\022\021\023\014\024\017\025\016\026" +
    "\023\046\027\001\002\000\016\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\046\ufff8\001\002\000\004\044\031\001" +
    "\002\000\004\044\ufff0\001\002\000\006\006\035\045\u010e" +
    "\001\002\000\004\044\034\001\002\000\004\044\ufff1\001" +
    "\002\000\006\006\035\045\036\001\002\000\020\022\021" +
    "\024\017\027\051\030\047\031\052\032\050\033\042\001" +
    "\002\000\004\005\037\001\002\000\004\046\040\001\002" +
    "\000\006\002\ufffa\044\ufffa\001\002\000\022\022\uffe6\024" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\046\uffe6" +
    "\001\002\000\004\047\u010b\001\002\000\022\022\021\024" +
    "\017\027\051\030\047\031\052\032\050\033\042\046\073" +
    "\001\002\000\022\022\uffe7\024\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\046\uffe7\001\002\000\022\022\uffe9" +
    "\024\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\046" +
    "\uffe9\001\002\000\022\022\uffea\024\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\046\uffea\001\002\000\004\047" +
    "\070\001\002\000\004\047\065\001\002\000\004\047\062" +
    "\001\002\000\004\047\057\001\002\000\022\022\uffeb\024" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\046\uffeb" +
    "\001\002\000\022\022\uffec\024\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\046\uffec\001\002\000\022\022\uffe5" +
    "\024\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\046" +
    "\uffe5\001\002\000\022\022\uffe8\024\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\046\uffe8\001\002\000\006\051" +
    "\061\052\060\001\002\000\054\013\uff88\015\uff88\016\uff88" +
    "\022\uff88\023\uff88\024\uff88\027\uff88\030\uff88\031\uff88\032" +
    "\uff88\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\046\uff88\057\uff88\001\002\000" +
    "\054\013\uff89\015\uff89\016\uff89\022\uff89\023\uff89\024\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\046\uff89\057\uff89\001\002\000\006\051\064\052\063\001" +
    "\002\000\054\013\uff8c\015\uff8c\016\uff8c\022\uff8c\023\uff8c" +
    "\024\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\046\uff8c\057\uff8c\001\002\000\054\013\uff8d\015" +
    "\uff8d\016\uff8d\022\uff8d\023\uff8d\024\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\046\uff8d\057\uff8d" +
    "\001\002\000\006\051\067\052\066\001\002\000\054\013" +
    "\uff86\015\uff86\016\uff86\022\uff86\023\uff86\024\uff86\027\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\046\uff86" +
    "\057\uff86\001\002\000\054\013\uff87\015\uff87\016\uff87\022" +
    "\uff87\023\uff87\024\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041" +
    "\uff87\042\uff87\043\uff87\046\uff87\057\uff87\001\002\000\006" +
    "\051\072\052\071\001\002\000\054\013\uff8a\015\uff8a\016" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\046\uff8a\057\uff8a\001\002" +
    "\000\054\013\uff8b\015\uff8b\016\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\046\uff8b\057\uff8b\001\002\000\004\044\104\001\002" +
    "\000\022\022\uffed\024\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\046\uffed\001\002\000\004\044\uffe2\001\002" +
    "\000\004\044\uffdf\001\002\000\004\044\uffe1\001\002\000" +
    "\004\044\uffe3\001\002\000\004\044\u0107\001\002\000\004" +
    "\044\uffde\001\002\000\004\044\uffe0\001\002\000\016\007" +
    "\105\010\112\017\107\020\106\021\110\045\111\001\002" +
    "\000\022\024\017\027\051\030\047\034\133\035\113\036" +
    "\114\037\137\040\120\001\002\000\020\013\226\027\051" +
    "\030\047\031\052\032\050\034\133\043\123\001\002\000" +
    "\022\015\314\016\317\023\014\027\051\030\047\031\052" +
    "\032\050\034\133\001\002\000\020\013\226\027\051\030" +
    "\047\031\052\032\050\034\133\043\123\001\002\000\004" +
    "\006\265\001\002\000\036\023\014\024\017\027\051\030" +
    "\047\031\052\032\050\034\133\035\113\036\114\037\137" +
    "\040\120\041\127\042\142\043\123\001\002\000\004\047" +
    "\263\001\002\000\004\047\260\001\002\000\040\023\uffaa" +
    "\024\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\046\uffaa\001\002\000\040\023\014\024\017\027\051\030" +
    "\047\031\052\032\050\034\133\035\113\036\114\037\137" +
    "\040\120\041\127\042\142\043\123\046\164\001\002\000" +
    "\040\023\uffab\024\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\046\uffab\001\002\000\004\047\160\001\002" +
    "\000\040\023\uffa0\024\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\046\uffa0\001\002\000\040\023\uffa5\024" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\046" +
    "\uffa5\001\002\000\004\047\156\001\002\000\040\023\uffa2" +
    "\024\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\046\uffa2\001\002\000\040\023\uffad\024\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\046\uffad\001\002\000" +
    "\040\023\uffae\024\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\046\uffae\001\002\000\004\047\153\001\002" +
    "\000\040\023\uffac\024\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\046\uffac\001\002\000\040\023\uffa8\024" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\046" +
    "\uffa8\001\002\000\040\023\uffa9\024\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\046\uffa9\001\002\000\004" +
    "\047\151\001\002\000\040\023\uffa3\024\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\046\uffa3\001\002\000" +
    "\040\023\uffa4\024\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\046\uffa4\001\002\000\040\023\uffa1\024\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\046\uffa1" +
    "\001\002\000\004\047\146\001\002\000\040\023\uffa7\024" +
    "\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\046" +
    "\uffa7\001\002\000\040\023\uffa6\024\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\046\uffa6\001\002\000\004" +
    "\047\143\001\002\000\006\051\145\052\144\001\002\000" +
    "\040\023\uff78\024\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\046\uff78\001\002\000\040\023\uff79\024\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\046\uff79" +
    "\001\002\000\006\055\150\056\147\001\002\000\042\023" +
    "\uff7f\024\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\046\uff7f\057\uff7f\001\002\000\042\023\uff7e\024\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\046\uff7e" +
    "\057\uff7e\001\002\000\004\053\152\001\002\000\050\013" +
    "\uff83\015\uff83\016\uff83\023\uff83\024\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\046\uff83\057\uff83\001\002" +
    "\000\006\051\155\052\154\001\002\000\040\023\uff7a\024" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\046" +
    "\uff7a\001\002\000\040\023\uff7b\024\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\046\uff7b\001\002\000\004" +
    "\054\157\001\002\000\044\013\uff77\023\uff77\024\uff77\027" +
    "\uff77\030\uff77\031\uff77\032\uff77\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\046\uff77\057" +
    "\uff77\001\002\000\006\055\162\056\161\001\002\000\042" +
    "\023\uff7d\024\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\046\uff7d\057\uff7d\001\002\000\042\023\uff7c\024" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\034\uff7c\035\uff7c" +
    "\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\046" +
    "\uff7c\057\uff7c\001\002\000\040\023\uffaf\024\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\046\uffaf\001\002" +
    "\000\004\044\171\001\002\000\004\044\254\001\002\000" +
    "\004\044\uff9c\001\002\000\004\044\uff9e\001\002\000\004" +
    "\044\uff9d\001\002\000\010\011\172\014\174\045\173\001" +
    "\002\000\006\043\123\046\217\001\002\000\004\010\214" +
    "\001\002\000\006\046\176\057\175\001\002\000\004\045" +
    "\211\001\002\000\006\051\200\052\177\001\002\000\004" +
    "\044\205\001\002\000\004\044\201\001\002\000\004\045" +
    "\202\001\002\000\004\014\203\001\002\000\004\046\204" +
    "\001\002\000\004\044\uff95\001\002\000\004\045\206\001" +
    "\002\000\004\014\207\001\002\000\004\046\210\001\002" +
    "\000\004\044\uff94\001\002\000\004\014\212\001\002\000" +
    "\004\046\213\001\002\000\004\044\uff93\001\002\000\004" +
    "\046\215\001\002\000\004\044\uffb0\001\002\000\004\046" +
    "\245\001\002\000\004\044\221\001\002\000\004\044\240" +
    "\001\002\000\004\012\223\001\002\000\004\044\uff98\001" +
    "\002\000\006\013\226\057\224\001\002\000\004\045\235" +
    "\001\002\000\004\057\231\001\002\000\004\047\227\001" +
    "\002\000\004\053\230\001\002\000\024\013\uff76\027\uff76" +
    "\030\uff76\031\uff76\032\uff76\034\uff76\043\uff76\046\uff76\057" +
    "\uff76\001\002\000\004\045\232\001\002\000\004\012\233" +
    "\001\002\000\004\046\234\001\002\000\004\044\uff97\001" +
    "\002\000\004\012\236\001\002\000\004\046\237\001\002" +
    "\000\004\044\uff96\001\002\000\006\012\223\045\242\001" +
    "\002\000\004\044\uff99\001\002\000\004\011\243\001\002" +
    "\000\004\046\244\001\002\000\004\044\uff9a\001\002\000" +
    "\004\044\221\001\002\000\004\044\247\001\002\000\006" +
    "\012\223\045\250\001\002\000\004\011\251\001\002\000" +
    "\004\046\252\001\002\000\004\044\uff9b\001\002\000\004" +
    "\044\uff9f\001\002\000\010\011\172\014\174\045\255\001" +
    "\002\000\004\010\256\001\002\000\004\046\257\001\002" +
    "\000\004\044\uffb1\001\002\000\006\051\262\052\261\001" +
    "\002\000\042\023\uff80\024\uff80\027\uff80\030\uff80\031\uff80" +
    "\032\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041" +
    "\uff80\042\uff80\043\uff80\046\uff80\057\uff80\001\002\000\042" +
    "\023\uff81\024\uff81\027\uff81\030\uff81\031\uff81\032\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81" +
    "\043\uff81\046\uff81\057\uff81\001\002\000\004\053\264\001" +
    "\002\000\042\023\uff82\024\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\046\uff82\057\uff82\001\002\000\004" +
    "\046\266\001\002\000\004\044\uffef\001\002\000\024\013" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\043\uffb4" +
    "\046\uffb4\057\uffb4\001\002\000\024\013\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\043\uffb6\046\uffb6\057\uffb6" +
    "\001\002\000\024\013\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\034\uffb7\043\uffb7\046\uffb7\057\uffb7\001\002\000\024" +
    "\013\226\027\051\030\047\031\052\032\050\034\133\043" +
    "\123\046\302\057\300\001\002\000\024\013\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\034\uffb3\043\uffb3\046\uffb3\057" +
    "\uffb3\001\002\000\024\013\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\034\uffb9\043\uffb9\046\uffb9\057\uffb9\001\002\000" +
    "\024\013\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2" +
    "\043\uffb2\046\uffb2\057\uffb2\001\002\000\024\013\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\043\uffb8\046\uffb8" +
    "\057\uffb8\001\002\000\024\013\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\034\uffb5\043\uffb5\046\uffb5\057\uffb5\001\002" +
    "\000\004\045\311\001\002\000\024\013\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\034\uffba\043\uffba\046\uffba\057\uffba" +
    "\001\002\000\004\044\304\001\002\000\004\044\305\001" +
    "\002\000\004\007\105\001\002\000\004\045\306\001\002" +
    "\000\004\021\307\001\002\000\004\046\310\001\002\000" +
    "\004\044\uffbc\001\002\000\004\021\312\001\002\000\004" +
    "\046\313\001\002\000\004\044\uffbb\001\002\000\004\047" +
    "\341\001\002\000\024\015\uffcb\016\uffcb\023\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\034\uffcb\046\uffcb\001\002\000" +
    "\024\015\uffcc\016\uffcc\023\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\034\uffcc\046\uffcc\001\002\000\004\047\336\001" +
    "\002\000\024\015\314\016\317\023\014\027\051\030\047" +
    "\031\052\032\050\034\133\046\330\001\002\000\024\015" +
    "\uffce\016\uffce\023\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\034\uffce\046\uffce\001\002\000\024\015\uffcd\016\uffcd\023" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd\046\uffcd" +
    "\001\002\000\024\015\uffc9\016\uffc9\023\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\034\uffc9\046\uffc9\001\002\000\024" +
    "\015\uffca\016\uffca\023\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\034\uffca\046\uffca\001\002\000\024\015\uffc8\016\uffc8" +
    "\023\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8\046" +
    "\uffc8\001\002\000\024\015\uffd0\016\uffd0\023\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\034\uffd0\046\uffd0\001\002\000" +
    "\024\015\uffcf\016\uffcf\023\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\034\uffcf\046\uffcf\001\002\000\004\044\332\001" +
    "\002\000\024\015\uffd1\016\uffd1\023\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\034\uffd1\046\uffd1\001\002\000\004\045" +
    "\333\001\002\000\004\017\334\001\002\000\004\046\335" +
    "\001\002\000\004\044\uffd2\001\002\000\006\055\340\056" +
    "\337\001\002\000\024\015\uff74\016\uff74\023\uff74\027\uff74" +
    "\030\uff74\031\uff74\032\uff74\034\uff74\046\uff74\001\002\000" +
    "\024\015\uff73\016\uff73\023\uff73\027\uff73\030\uff73\031\uff73" +
    "\032\uff73\034\uff73\046\uff73\001\002\000\004\053\342\001" +
    "\002\000\024\015\uff75\016\uff75\023\uff75\027\uff75\030\uff75" +
    "\031\uff75\032\uff75\034\uff75\046\uff75\001\002\000\024\013" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\043\uffbf" +
    "\046\uffbf\057\uffbf\001\002\000\024\013\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\034\uffc1\043\uffc1\046\uffc1\057\uffc1" +
    "\001\002\000\024\013\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\034\uffc2\043\uffc2\046\uffc2\057\uffc2\001\002\000\024" +
    "\013\226\027\051\030\047\031\052\032\050\034\133\043" +
    "\123\046\356\057\354\001\002\000\024\013\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\034\uffc4\043\uffc4\046\uffc4\057" +
    "\uffc4\001\002\000\024\013\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\034\uffbe\043\uffbe\046\uffbe\057\uffbe\001\002\000" +
    "\024\013\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd" +
    "\043\uffbd\046\uffbd\057\uffbd\001\002\000\024\013\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\043\uffc3\046\uffc3" +
    "\057\uffc3\001\002\000\024\013\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\034\uffc0\043\uffc0\046\uffc0\057\uffc0\001\002" +
    "\000\004\045\364\001\002\000\024\013\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\034\uffc5\043\uffc5\046\uffc5\057\uffc5" +
    "\001\002\000\004\044\304\001\002\000\004\044\360\001" +
    "\002\000\004\045\361\001\002\000\004\020\362\001\002" +
    "\000\004\046\363\001\002\000\004\044\uffc7\001\002\000" +
    "\004\020\365\001\002\000\004\046\366\001\002\000\004" +
    "\044\uffc6\001\002\000\024\024\uffdb\027\uffdb\030\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\057\uffdb\001\002" +
    "\000\024\024\017\027\051\030\047\034\133\035\113\036" +
    "\114\037\137\040\120\057\u0102\001\002\000\024\024\uffd8" +
    "\027\uffd8\030\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\057\uffd8\001\002\000\024\024\uffd9\027\uffd9\030\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\057\uffd9\001" +
    "\002\000\024\024\uffd5\027\uffd5\030\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\057\uffd5\001\002\000\024\024" +
    "\uffda\027\uffda\030\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\057\uffda\001\002\000\024\024\uffd3\027\uffd3\030" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\057\uffd3" +
    "\001\002\000\024\024\uffd4\027\uffd4\030\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\057\uffd4\001\002\000\024" +
    "\024\uffd7\027\uffd7\030\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\057\uffd7\001\002\000\024\024\uffd6\027\uffd6" +
    "\030\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\057" +
    "\uffd6\001\002\000\024\024\uffdc\027\uffdc\030\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\057\uffdc\001\002\000" +
    "\004\045\u0103\001\002\000\004\007\u0104\001\002\000\004" +
    "\046\u0105\001\002\000\004\044\uffdd\001\002\000\004\044" +
    "\uffe4\001\002\000\016\007\105\010\112\017\107\020\106" +
    "\021\110\045\u0108\001\002\000\004\006\u0109\001\002\000" +
    "\004\046\u010a\001\002\000\004\044\uffee\001\002\000\006" +
    "\055\u010d\056\u010c\001\002\000\022\022\uff85\024\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\033\uff85\046\uff85\001\002" +
    "\000\022\022\uff84\024\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\uff84\046\uff84\001\002\000\004\005\u010f\001\002" +
    "\000\004\046\u0110\001\002\000\006\002\ufff9\044\ufff9\001" +
    "\002\000\004\054\u0112\001\002\000\016\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\046\uff8e\001\002\000\004\053" +
    "\u0114\001\002\000\030\022\uff92\023\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\046" +
    "\uff92\001\002\000\004\053\u0116\001\002\000\052\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\046\uff90\057\uff90\001" +
    "\002\000\004\054\u0118\001\002\000\016\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\046\uff8f\001\002\000\004\053" +
    "\u011a\001\002\000\052\015\uff91\016\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\046\uff91\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\010\002\004\005\006\006\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\007\001\001\000\002\001\001\000\020\007\024\010" +
    "\017\044\021\045\023\046\012\047\014\050\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\025\044\021\045\023" +
    "\046\012\047\014\050\011\001\001\000\002\001\001\000" +
    "\006\011\031\012\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\013\042\014\053\044\052\046\040" +
    "\051\045\052\044\053\055\054\043\055\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\073\044\052\046" +
    "\040\051\045\052\044\053\055\054\043\055\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\100\016\077\017\074\022\076\033\102" +
    "\036\075\041\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\u0105\017\074\022\076\033\102\036\075\041" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\367\021\366\046\372\051\371\052" +
    "\370\056\373\057\376\060\377\061\375\062\374\001\001" +
    "\000\024\037\345\040\346\051\344\052\343\053\352\054" +
    "\342\056\351\065\350\066\347\001\001\000\026\034\317" +
    "\035\325\045\320\051\315\052\314\053\323\054\322\056" +
    "\321\067\326\070\324\001\001\000\024\042\271\043\273" +
    "\051\270\052\267\053\276\054\266\056\275\065\274\066" +
    "\272\001\001\000\002\001\001\000\042\023\115\024\125" +
    "\045\124\046\121\051\116\052\114\053\131\054\130\056" +
    "\127\057\137\060\140\061\134\062\133\063\123\064\135" +
    "\065\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\024\162\045\124\046\121\051\116" +
    "\052\114\053\131\054\130\056\127\057\137\060\140\061" +
    "\134\062\133\063\123\064\135\065\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\167\030\165\031\164\032\166" +
    "\001\001\000\010\025\167\030\165\032\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\217\027\221\001\001\000\004\027\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\245\027\221\001\001\000\004\027" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\043\300\051\270\052\267\053\276\054\266" +
    "\056\275\065\274\066\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\035\330\045\320\051\315\052\314" +
    "\053\323\054\322\056\321\067\326\070\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\040\354\051\344\052\343" +
    "\053\352\054\342\056\351\065\350\066\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\021\u0100\046\372\051\371\052" +
    "\370\056\373\057\376\060\377\061\375\062\374\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser_gxml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser_gxml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser_gxml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s) {
        StringBuilder m = new StringBuilder("Error Sintactico");
        int yline = s.left, ycol = s.right;

        if(s.left >= 0) {
        	m.append(" en la Linea " + (s.left));
        	if(s.right >= 0) {
        		m.append(" Columna " + (s.right));
        	}
        	m.append(". No se esperaba este componente: " + s.value + ".");
        }
        System.out.println(m);
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        syntax_error(s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser_gxml$actions {
  private final Parser_gxml parser;

  /** Constructor */
  CUP$Parser_gxml$actions(Parser_gxml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser_gxml$do_action_part00000000(
    int                        CUP$Parser_gxml$act_num,
    java_cup.runtime.lr_parser CUP$Parser_gxml$parser,
    java.util.Stack            CUP$Parser_gxml$stack,
    int                        CUP$Parser_gxml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser_gxml$result;

      /* select the action based on the action number */
      switch (CUP$Parser_gxml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)).value;
		RESULT = start_val;
              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser_gxml$parser.done_parsing();
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES ::= IMPORTACIONES IMPORTAR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",1, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= IMPORTAR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",1, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTAR ::= men pr_importar may ruta men slash pr_importar may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VENTANAS ::= VENTANAS VENTANA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",3, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VENTANAS ::= VENTANA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("VENTANAS",3, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VENTANA ::= men pr_ventana ELEMENTOS_VENTANA may CONTENEDORES men slash pr_ventana may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("VENTANA",4, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VENTANA ::= men pr_ventana ELEMENTOS_VENTANA may men slash pr_ventana may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("VENTANA",4, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELEMENTOS_VENTANA ::= ELEMENTOS_VENTANA ELEMENTO_VENTANA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELEMENTOS_VENTANA ::= ELEMENTO_VENTANA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",5, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTO_VENTANA ::= ID 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTO_VENTANA ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO_VENTANA ::= COLOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO_VENTANA ::= ACCIONINI 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO_VENTANA ::= ACCIONFIN 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENEDORES ::= CONTENEDORES CONTENEDOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",7, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENEDORES ::= CONTENEDOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",7, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENEDOR ::= men pr_contenedor ELEMENTOS_CONTENEDOR may men slash pr_contenedor may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENEDOR ::= men pr_contenedor ELEMENTOS_CONTENEDOR may INSTRUCCIONES men slash pr_contenedor may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTOS_CONTENEDOR ::= ELEMENTOS_CONTENEDOR ELEMENTO_CONTENEDOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",9, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTOS_CONTENEDOR ::= ELEMENTO_CONTENEDOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",9, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO_CONTENEDOR ::= ID 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO_CONTENEDOR ::= X 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO_CONTENEDOR ::= Y 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELEMENTO_CONTENEDOR ::= ALTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELEMENTO_CONTENEDOR ::= ANCHO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTO_CONTENEDOR ::= COLOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO_CONTENEDOR ::= BORDE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= CONTROLADOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= BOTON 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= ENVIAR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TEXTO ::= men pr_texto ELEMENTOS_TEXTO todo slash pr_texto may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("TEXTO",13, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-6)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTOS_TEXTO ::= ELEMENTOS_TEXTO ELEMENTO_TEXTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",14, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTOS_TEXTO ::= ELEMENTO_TEXTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",14, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO_TEXTO ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO_TEXTO ::= X 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO_TEXTO ::= Y 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO_TEXTO ::= FUENTE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO_TEXTO ::= TAM 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO_TEXTO ::= COLOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO_TEXTO ::= NEGRITA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO_TEXTO ::= CURSIVA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MULTIMEDIA ::= men pr_multimedia ELEMENTOS_MULTIMEDIA may men slash pr_multimedia may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",25, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTOS_MULTIMEDIA ::= ELEMENTOS_MULTIMEDIA ELEMENTO_MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",26, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTOS_MULTIMEDIA ::= ELEMENTO_MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",26, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO_MULTIMEDIA ::= PATH 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO_MULTIMEDIA ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_MULTIMEDIA ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_MULTIMEDIA ::= X 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_MULTIMEDIA ::= Y 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_MULTIMEDIA ::= ALTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_MULTIMEDIA ::= ANCHO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO_MULTIMEDIA ::= AUTO_REPRODUCCION 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOTON ::= men pr_boton ELEMENTOS_BOTON may TEXTO men slash pr_boton may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("BOTON",28, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOTON ::= men pr_boton ELEMENTOS_BOTON todo slash pr_boton may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("BOTON",28, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-6)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTOS_BOTON ::= ELEMENTOS_BOTON ELEMENTO_BOTON 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",29, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTOS_BOTON ::= ELEMENTO_BOTON 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",29, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO_BOTON ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO_BOTON ::= X 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO_BOTON ::= Y 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO_BOTON ::= ALTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO_BOTON ::= ANCHO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO_BOTON ::= REFERENCIA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO_BOTON ::= ACCION 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENVIAR ::= men pr_enviar ELEMENTOS_ENVIAR may TEXTO men slash pr_enviar may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ENVIAR",31, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ENVIAR ::= men pr_enviar ELEMENTOS_ENVIAR todo slash pr_enviar may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ENVIAR",31, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-6)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTOS_ENVIAR ::= ELEMENTOS_ENVIAR ELEMENTO_ENVIAR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",32, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTOS_ENVIAR ::= ELEMENTO_ENVIAR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",32, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELEMENTO_ENVIAR ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTO_ENVIAR ::= X 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTO_ENVIAR ::= Y 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTO_ENVIAR ::= ALTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELEMENTO_ENVIAR ::= ANCHO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELEMENTO_ENVIAR ::= REFERENCIA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELEMENTO_ENVIAR ::= ACCION 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTROLADOR ::= men pr_control ELEMENTOS_CONTROLADOR may ESPECIALES men slash pr_control may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",16, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTROLADOR ::= men pr_control ELEMENTOS_CONTROLADOR may men slash pr_control may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",16, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTOS_CONTROLADOR ::= ELEMENTOS_CONTROLADOR ELEMENTO_CONTROLADOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLADOR",17, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTOS_CONTROLADOR ::= ELEMENTO_CONTROLADOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLADOR",17, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTO_CONTROLADOR ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_CONTROLADOR ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_CONTROLADOR ::= X 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_CONTROLADOR ::= Y 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_CONTROLADOR ::= ALTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_CONTROLADOR ::= ANCHO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTO_CONTROLADOR ::= FUENTE 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTO_CONTROLADOR ::= TAM 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTO_CONTROLADOR ::= COLOR 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTO_CONTROLADOR ::= NEGRITA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTO_CONTROLADOR ::= CURSIVA 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTO_CONTROLADOR ::= MAXIMO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTO_CONTROLADOR ::= MINIMO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTO_CONTROLADOR ::= ACCION 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ESPECIALES ::= ESPECIALES ESPECIAL 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ESPECIALES",23, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESPECIALES ::= ESPECIAL 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ESPECIALES",23, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESPECIAL ::= LISTA_DATO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ESPECIAL",24, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESPECIAL ::= DEFECTO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ESPECIAL",24, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA_DATO ::= men pr_listadatos ACCION may DATOS men slash pr_listadatos may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("LISTA_DATO",19, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-8)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA_DATO ::= men pr_listadatos may DATOS men slash pr_listadatos may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("LISTA_DATO",19, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DATOS ::= DATOS DATO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DATOS",20, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DATOS ::= DATO 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DATOS",20, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DATO ::= men pr_dato REFERENCIA todo slash pr_dato may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DATO",21, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-6)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DATO ::= men pr_dato todo slash pr_dato may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DATO",21, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DEFECTO ::= men pr_defecto may entero men slash pr_defecto may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DEFECTO",22, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DEFECTO ::= men pr_defecto may decimal men slash pr_defecto may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DEFECTO",22, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-7)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DEFECTO ::= men pr_defecto todo slash pr_defecto may 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("DEFECTO",22, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-5)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ID ::= pr_id igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ID",34, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TIPO ::= pr_tipo igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COLOR ::= pr_color igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("COLOR",36, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ACCIONINI ::= pr_accioninicial igual llfuncion 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ACCIONINI",37, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACCIONFIN ::= pr_accionfinal igual llfuncion 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ACCIONFIN",38, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // X ::= pr_x igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("X",39, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // X ::= pr_x igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("X",39, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Y ::= pr_y igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("Y",40, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Y ::= pr_y igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("Y",40, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ALTO ::= pr_alto igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ALTO",41, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ALTO ::= pr_alto igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ALTO",41, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ANCHO ::= pr_ancho igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ANCHO",42, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ANCHO ::= pr_ancho igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ANCHO",42, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BORDE ::= pr_borde igual pr_verdadero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("BORDE",43, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BORDE ::= pr_borde igual pr_falso 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("BORDE",43, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NOMBRE ::= pr_nombre igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("NOMBRE",44, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // FUENTE ::= pr_fuente igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("FUENTE",45, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TAM ::= pr_tam igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("TAM",46, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TAM ::= pr_tam igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("TAM",46, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NEGRITA ::= pr_negrita igual pr_verdadero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("NEGRITA",47, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NEGRITA ::= pr_negrita igual pr_falso 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("NEGRITA",47, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CURSIVA ::= pr_cursiva igual pr_verdadero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CURSIVA",48, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CURSIVA ::= pr_cursiva igual pr_falso 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("CURSIVA",48, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MAXIMO ::= pr_maximo igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("MAXIMO",49, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MAXIMO ::= pr_maximo igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("MAXIMO",49, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MINIMO ::= pr_minimo igual entero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("MINIMO",50, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MINIMO ::= pr_minimo igual decimal 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("MINIMO",50, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ACCION ::= pr_accion igual llfuncion 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("ACCION",51, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // REFERENCIA ::= pr_referencia igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("REFERENCIA",52, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PATH ::= pr_path igual cadena 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("PATH",53, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AUTO_REPRODUCCION ::= pr_autoreproduccion igual pr_verdadero 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("AUTO_REPRODUCCION",54, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AUTO_REPRODUCCION ::= pr_autoreproduccion igual pr_falso 
            {
              Object RESULT =null;

              CUP$Parser_gxml$result = parser.getSymbolFactory().newSymbol("AUTO_REPRODUCCION",54, ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.elementAt(CUP$Parser_gxml$top-2)), ((java_cup.runtime.Symbol)CUP$Parser_gxml$stack.peek()), RESULT);
            }
          return CUP$Parser_gxml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser_gxml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser_gxml$do_action(
    int                        CUP$Parser_gxml$act_num,
    java_cup.runtime.lr_parser CUP$Parser_gxml$parser,
    java.util.Stack            CUP$Parser_gxml$stack,
    int                        CUP$Parser_gxml$top)
    throws java.lang.Exception
    {
              return CUP$Parser_gxml$do_action_part00000000(
                               CUP$Parser_gxml$act_num,
                               CUP$Parser_gxml$parser,
                               CUP$Parser_gxml$stack,
                               CUP$Parser_gxml$top);
    }
}

}
