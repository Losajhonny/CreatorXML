/* The following code was generated by JFlex 1.6.1 */

package analizadores.gxml;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizadores/gxml/Scanner_gxml.jflex</tt>
 */
public class Scanner_gxml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TK_TODO = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\1\21\1\22\1\20\22\0\1\1\1\0\1\14"+
    "\1\17\1\24\2\0\1\13\5\0\1\53\1\3\1\2\12\12\1\6"+
    "\1\0\1\16\1\54\1\15\2\0\1\34\1\50\1\40\1\41\1\36"+
    "\1\46\1\52\1\51\1\26\2\5\1\43\1\27\1\37\1\31\1\30"+
    "\1\5\1\32\1\45\1\33\1\47\1\35\1\5\1\42\1\55\1\5"+
    "\1\0\1\7\4\0\1\34\1\50\1\40\1\41\1\36\1\46\1\52"+
    "\1\51\1\26\2\5\1\43\1\27\1\37\1\31\1\30\1\5\1\32"+
    "\1\45\1\33\1\47\1\35\1\5\1\42\1\55\1\5\1\10\1\23"+
    "\1\11\7\0\1\21\252\0\2\25\115\0\1\44\u1ea8\0\1\21\1\21"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\1\1\5\2\1"+
    "\1\6\1\7\15\1\1\10\3\1\1\11\1\12\1\13"+
    "\1\2\1\3\1\4\2\13\1\5\2\13\1\6\15\13"+
    "\1\10\3\13\1\11\1\12\5\0\1\14\1\0\1\14"+
    "\3\0\1\15\30\0\4\13\2\14\3\13\1\15\30\13"+
    "\3\0\1\16\1\17\1\2\10\0\1\20\24\0\3\13"+
    "\1\16\1\17\1\2\10\13\1\20\24\13\2\21\7\0"+
    "\1\22\1\0\1\23\3\0\1\24\11\0\1\25\6\0"+
    "\2\21\7\13\1\22\1\13\1\23\3\13\1\24\11\13"+
    "\1\25\6\13\1\21\2\0\1\2\5\0\1\26\1\27"+
    "\11\0\1\30\3\0\1\31\1\0\1\32\1\33\1\21"+
    "\2\13\1\2\5\13\1\26\1\27\11\13\1\30\3\13"+
    "\1\31\1\13\1\32\1\33\1\21\1\0\1\34\1\35"+
    "\2\0\1\36\3\0\1\37\1\40\6\0\1\41\1\21"+
    "\1\13\1\34\1\35\2\13\1\36\3\13\1\37\1\40"+
    "\6\13\1\41\7\0\1\42\1\43\1\44\1\0\1\45"+
    "\1\46\1\0\7\13\1\42\1\43\1\44\1\13\1\45"+
    "\1\46\1\13\1\47\10\0\1\47\10\13\5\0\1\50"+
    "\2\0\5\13\1\50\2\13\1\51\1\52\3\0\1\53"+
    "\1\54\1\51\1\52\3\13\1\53\1\54\1\0\1\55"+
    "\1\0\1\13\1\55\1\13\2\0\2\13\1\56\1\0"+
    "\1\56\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\2\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\134\0\212\0\134\0\270\0\346"+
    "\0\u0114\0\u0142\0\u0170\0\134\0\134\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\270\0\u03f4\0\u0422\0\u0450\0\134\0\270"+
    "\0\u047e\0\u047e\0\u04ac\0\u047e\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u047e\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u04da"+
    "\0\u0816\0\u0844\0\u0872\0\u047e\0\u04da\0\u08a0\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0142\0\u0142\0\u0170\0\u0170\0\u0958\0\u0986\0\u09b4"+
    "\0\134\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0564\0\u0592\0\u0eea"+
    "\0\u0f18\0\u0f46\0\u047e\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c"+
    "\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\212\0\u13c4\0\u13f2\0\u08fc\0\u092a"+
    "\0\u0958\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\134\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u04ac\0\u1928"+
    "\0\u1956\0\u0e8e\0\u0ebc\0\u0eea\0\u1984\0\u19b2\0\u19e0\0\u1a0e"+
    "\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u047e\0\u1af4\0\u1b22\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30"+
    "\0\u1e5e\0\u13c4\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72"+
    "\0\u1fa0\0\u1fce\0\134\0\u1ffc\0\134\0\u202a\0\u2058\0\u2086"+
    "\0\134\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8"+
    "\0\u21f6\0\u2224\0\134\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a"+
    "\0\u2338\0\u1928\0\u2366\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c"+
    "\0\u247a\0\u24a8\0\u047e\0\u24d6\0\u047e\0\u2504\0\u2532\0\u2560"+
    "\0\u047e\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2"+
    "\0\u26d0\0\u26fe\0\u047e\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4"+
    "\0\u2812\0\u2840\0\u286e\0\u289c\0\u289c\0\u28ca\0\u28f8\0\u2926"+
    "\0\u2954\0\u2982\0\134\0\134\0\u29b0\0\u29de\0\u2a0c\0\u2a3a"+
    "\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\134\0\u2b4e\0\u2b7c"+
    "\0\u2baa\0\134\0\u2bd8\0\134\0\134\0\u2c06\0\u2c34\0\u2c62"+
    "\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u047e\0\u047e"+
    "\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8"+
    "\0\u2ee6\0\u047e\0\u2f14\0\u2f42\0\u2f70\0\u047e\0\u2f9e\0\u047e"+
    "\0\u047e\0\u286e\0\u2fcc\0\134\0\134\0\u2ffa\0\u3028\0\u3056"+
    "\0\u3084\0\u30b2\0\u30e0\0\134\0\134\0\u310e\0\u313c\0\u316a"+
    "\0\u3198\0\u31c6\0\u31f4\0\134\0\u2c34\0\u3222\0\u047e\0\u047e"+
    "\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336\0\u047e\0\u047e"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u047e\0\u3478"+
    "\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c\0\134\0\134"+
    "\0\134\0\u35ba\0\134\0\134\0\u35e8\0\u3616\0\u3644\0\u3672"+
    "\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u047e\0\u047e\0\u047e\0\u3758"+
    "\0\u047e\0\u047e\0\u3786\0\134\0\u37b4\0\u37e2\0\u3810\0\u383e"+
    "\0\u386c\0\u389a\0\u38c8\0\u38f6\0\u047e\0\u3924\0\u3952\0\u3980"+
    "\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2\0\u3af0"+
    "\0\u3b1e\0\u3b4c\0\134\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32"+
    "\0\u3c60\0\u3c8e\0\u047e\0\u3cbc\0\u3cea\0\134\0\134\0\u3d18"+
    "\0\u3d46\0\u3d74\0\134\0\134\0\u047e\0\u047e\0\u3da2\0\u3dd0"+
    "\0\u3dfe\0\u047e\0\u047e\0\u3e2c\0\134\0\u3e5a\0\u3e88\0\u047e"+
    "\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\134\0\u3f9c\0\u047e"+
    "\0\u3fca\0\u3ff8\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\134"+
    "\0\u047e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\2\3\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\4"+
    "\1\0\1\4\2\3\1\17\1\20\1\21\1\22\1\7"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\3\1\7\1\35\1\7\1\36\2\7"+
    "\1\3\1\37\1\40\1\41\1\42\1\43\1\41\1\44"+
    "\1\45\2\41\1\46\1\41\1\47\1\50\1\51\1\52"+
    "\1\15\1\53\1\42\1\41\1\42\2\41\1\54\1\55"+
    "\1\56\1\57\1\45\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\41\1\45\1\72"+
    "\1\45\1\73\2\45\1\41\1\74\1\75\56\0\2\76"+
    "\1\0\53\76\6\0\1\77\47\0\4\100\1\0\51\100"+
    "\3\0\1\101\6\0\1\11\43\0\4\102\1\0\6\102"+
    "\1\103\42\102\4\104\1\0\7\104\1\105\41\104\17\0"+
    "\1\106\4\0\1\107\60\0\1\110\11\0\1\111\22\0"+
    "\1\77\20\0\1\110\11\0\1\111\22\0\1\77\16\0"+
    "\2\112\5\0\1\113\12\0\1\114\14\0\1\77\25\0"+
    "\1\115\27\0\1\77\27\0\1\116\25\0\1\77\16\0"+
    "\2\117\5\0\1\120\1\0\1\121\25\0\1\77\30\0"+
    "\1\122\1\123\2\0\1\124\3\0\1\125\14\0\1\77"+
    "\27\0\1\126\25\0\1\77\30\0\1\127\24\0\1\77"+
    "\22\0\1\130\4\0\1\131\25\0\1\77\22\0\1\132"+
    "\15\0\1\133\14\0\1\77\25\0\1\134\1\0\1\135"+
    "\25\0\1\77\16\0\2\136\35\0\1\77\25\0\1\137"+
    "\12\0\1\140\14\0\1\77\22\0\1\141\24\0\16\41"+
    "\1\0\37\41\2\142\1\41\13\142\1\76\37\142\6\41"+
    "\1\143\7\41\1\0\37\41\4\144\1\41\11\144\1\100"+
    "\37\144\3\41\1\145\6\41\1\47\3\41\1\0\37\41"+
    "\4\50\1\41\6\50\1\146\2\50\1\102\37\50\4\51"+
    "\1\41\7\51\1\147\1\51\1\104\37\51\16\41\1\0"+
    "\1\150\4\41\1\151\47\41\1\0\10\41\1\152\11\41"+
    "\1\153\22\41\1\143\7\41\1\0\10\41\1\152\11\41"+
    "\1\153\22\41\1\143\7\41\1\0\6\41\2\154\5\41"+
    "\1\155\12\41\1\156\14\41\1\143\7\41\1\0\15\41"+
    "\1\157\27\41\1\143\7\41\1\0\17\41\1\160\25\41"+
    "\1\143\7\41\1\0\6\41\2\161\5\41\1\162\1\41"+
    "\1\163\25\41\1\143\7\41\1\0\20\41\1\164\1\165"+
    "\2\41\1\166\3\41\1\167\14\41\1\143\7\41\1\0"+
    "\17\41\1\170\25\41\1\143\7\41\1\0\20\41\1\171"+
    "\24\41\1\143\7\41\1\0\12\41\1\172\4\41\1\173"+
    "\25\41\1\143\7\41\1\0\12\41\1\174\15\41\1\175"+
    "\14\41\1\143\7\41\1\0\15\41\1\176\1\41\1\177"+
    "\25\41\1\143\7\41\1\0\6\41\2\200\35\41\1\143"+
    "\7\41\1\0\15\41\1\201\12\41\1\202\14\41\1\143"+
    "\7\41\1\0\12\41\1\203\24\41\2\76\1\204\1\205"+
    "\52\76\7\0\1\206\46\0\4\100\1\0\4\100\1\207"+
    "\44\100\12\0\1\210\43\0\4\106\1\4\13\106\1\4"+
    "\2\0\1\211\32\106\24\107\1\212\31\107\30\0\1\213"+
    "\64\0\1\214\60\0\1\215\56\0\1\216\45\0\1\217"+
    "\70\0\1\220\37\0\1\221\54\0\1\222\70\0\1\223"+
    "\53\0\1\224\55\0\1\225\50\0\1\226\55\0\1\227"+
    "\54\0\1\230\4\0\1\231\53\0\1\232\47\0\1\233"+
    "\100\0\1\234\42\0\1\235\3\0\1\236\44\0\1\237"+
    "\56\0\1\240\70\0\1\241\53\0\2\242\53\0\1\243"+
    "\50\0\1\244\51\0\1\245\1\246\22\0\2\142\1\247"+
    "\1\250\12\142\1\76\37\142\7\41\1\251\6\41\1\0"+
    "\37\41\4\144\1\41\4\144\1\252\4\144\1\100\37\144"+
    "\12\41\1\253\3\41\1\0\37\41\4\150\1\42\11\150"+
    "\1\106\1\150\1\42\2\41\1\254\32\150\16\151\1\107"+
    "\5\151\1\255\31\151\16\41\1\0\11\41\1\256\43\41"+
    "\1\0\20\41\1\257\34\41\1\0\23\41\1\260\31\41"+
    "\1\0\24\41\1\261\30\41\1\0\14\41\1\262\40\41"+
    "\1\0\27\41\1\263\25\41\1\0\11\41\1\264\43\41"+
    "\1\0\10\41\1\265\44\41\1\0\23\41\1\266\31\41"+
    "\1\0\21\41\1\267\33\41\1\0\21\41\1\270\33\41"+
    "\1\0\14\41\1\271\40\41\1\0\14\41\1\272\40\41"+
    "\1\0\13\41\1\273\4\41\1\274\34\41\1\0\16\41"+
    "\1\275\36\41\1\0\10\41\1\276\44\41\1\0\33\41"+
    "\1\277\21\41\1\0\20\41\1\300\3\41\1\301\30\41"+
    "\1\0\13\41\1\302\41\41\1\0\14\41\1\303\40\41"+
    "\1\0\27\41\1\304\25\41\1\0\25\41\2\305\26\41"+
    "\1\0\24\41\1\306\30\41\1\0\17\41\1\307\35\41"+
    "\1\0\13\41\1\310\1\311\22\41\2\312\1\313\1\312"+
    "\1\76\51\312\2\314\1\0\53\314\17\315\1\4\4\315"+
    "\1\316\31\315\31\0\1\317\51\0\2\320\54\0\2\321"+
    "\62\0\1\322\73\0\1\323\42\0\1\324\50\0\1\325"+
    "\57\0\1\326\73\0\1\327\31\0\2\330\60\0\1\331"+
    "\55\0\1\332\65\0\1\333\47\0\1\334\47\0\2\335"+
    "\77\0\1\336\37\0\1\337\56\0\1\340\53\0\1\341"+
    "\70\0\2\342\41\0\1\343\62\0\1\344\52\0\1\345"+
    "\66\0\2\346\47\0\1\347\57\0\1\350\45\0\1\351"+
    "\24\0\2\352\1\353\1\352\1\142\11\352\1\312\37\352"+
    "\2\354\1\41\13\354\1\314\37\354\16\355\1\315\1\42"+
    "\4\355\1\356\31\355\16\41\1\0\12\41\1\357\42\41"+
    "\1\0\6\41\2\360\45\41\1\0\6\41\2\361\45\41"+
    "\1\0\14\41\1\362\40\41\1\0\32\41\1\363\22\41"+
    "\1\0\17\41\1\364\35\41\1\0\12\41\1\365\42\41"+
    "\1\0\14\41\1\366\40\41\1\0\32\41\1\367\22\41"+
    "\1\0\6\41\2\370\45\41\1\0\12\41\1\371\42\41"+
    "\1\0\12\41\1\372\42\41\1\0\22\41\1\373\32\41"+
    "\1\0\14\41\1\374\40\41\1\0\6\41\2\375\45\41"+
    "\1\0\31\41\1\376\23\41\1\0\13\41\1\377\41\41"+
    "\1\0\14\41\1\u0100\40\41\1\0\12\41\1\u0101\42\41"+
    "\1\0\25\41\2\u0102\26\41\1\0\12\41\1\u0103\42\41"+
    "\1\0\17\41\1\u0104\35\41\1\0\14\41\1\u0105\40\41"+
    "\1\0\25\41\2\u0106\26\41\1\0\20\41\1\u0107\34\41"+
    "\1\0\22\41\1\u0108\32\41\1\0\12\41\1\u0109\24\41"+
    "\2\312\1\u010a\1\312\1\76\51\312\2\314\1\0\1\u010b"+
    "\52\314\17\107\1\u010c\4\107\1\212\50\107\1\u010d\4\107"+
    "\1\212\31\107\32\0\1\u010e\52\0\1\u010f\55\0\1\u0110"+
    "\53\0\2\u0111\61\0\1\u0112\54\0\1\u0113\55\0\1\u0114"+
    "\55\0\1\u0115\77\0\1\u0116\36\0\1\u0117\55\0\1\u0118"+
    "\55\0\1\u0119\53\0\1\u011a\50\0\2\u011b\61\0\1\u011c"+
    "\3\0\1\u011d\51\0\1\u011e\50\0\2\u011f\67\0\1\u0120"+
    "\51\0\1\u0121\52\0\1\u0122\57\0\1\u0123\60\0\1\u0124"+
    "\56\0\1\u0125\16\0\2\352\1\u0126\1\352\1\142\11\352"+
    "\1\312\37\352\2\354\1\41\1\u0127\12\354\1\314\37\354"+
    "\16\151\1\107\1\u0128\4\151\1\255\47\151\1\107\1\u0129"+
    "\4\151\1\255\31\151\16\41\1\0\13\41\1\u012a\41\41"+
    "\1\0\10\41\1\u012b\44\41\1\0\10\41\1\u012c\44\41"+
    "\1\0\6\41\2\u012d\45\41\1\0\13\41\1\u012e\41\41"+
    "\1\0\12\41\1\u012f\42\41\1\0\12\41\1\u0130\42\41"+
    "\1\0\12\41\1\u0131\42\41\1\0\34\41\1\u0132\20\41"+
    "\1\0\15\41\1\u0133\37\41\1\0\15\41\1\u0134\37\41"+
    "\1\0\15\41\1\u0135\37\41\1\0\13\41\1\u0136\41\41"+
    "\1\0\6\41\2\u0137\45\41\1\0\13\41\1\u0138\3\41"+
    "\1\u0139\35\41\1\0\13\41\1\u013a\41\41\1\0\6\41"+
    "\2\u013b\45\41\1\0\21\41\1\u013c\33\41\1\0\15\41"+
    "\1\u013d\37\41\1\0\12\41\1\u013e\42\41\1\0\14\41"+
    "\1\u013f\40\41\1\0\17\41\1\u0140\35\41\1\0\20\41"+
    "\1\u0141\16\41\4\u010a\1\0\51\u010a\2\u0142\1\u010a\1\u0142"+
    "\1\314\51\u0142\17\0\1\315\71\0\1\u0143\53\0\1\u0144"+
    "\55\0\1\u0145\53\0\1\u0146\64\0\1\u0147\56\0\1\u0148"+
    "\50\0\1\u0149\64\0\1\u014a\53\0\1\u014b\50\0\1\u014c"+
    "\61\0\1\u014d\52\0\1\u014e\53\0\1\u014f\63\0\1\u0150"+
    "\53\0\1\u0151\53\0\1\u0152\63\0\1\u0153\52\0\1\u0154"+
    "\17\0\4\u0126\1\41\11\u0126\1\u010a\37\u0126\2\u0155\1\u0126"+
    "\1\u0155\1\354\11\u0155\1\u0142\37\u0155\16\41\1\0\1\355"+
    "\54\41\1\0\14\41\1\u0156\40\41\1\0\12\41\1\u0157"+
    "\42\41\1\0\12\41\1\u0158\42\41\1\0\10\41\1\u0159"+
    "\44\41\1\0\17\41\1\u015a\35\41\1\0\20\41\1\u015b"+
    "\34\41\1\0\13\41\1\u015c\41\41\1\0\22\41\1\u015d"+
    "\32\41\1\0\20\41\1\u015e\34\41\1\0\13\41\1\u015f"+
    "\41\41\1\0\17\41\1\u0160\35\41\1\0\14\41\1\u0161"+
    "\40\41\1\0\12\41\1\u0162\42\41\1\0\20\41\1\u0163"+
    "\34\41\1\0\16\41\1\u0164\36\41\1\0\14\41\1\u0165"+
    "\40\41\1\0\22\41\1\u0166\32\41\1\0\17\41\1\u0167"+
    "\17\41\34\0\1\u0168\57\0\1\u0169\56\0\1\u016a\43\0"+
    "\2\u016b\17\0\1\u016c\45\0\1\u016d\55\0\1\u016e\53\0"+
    "\1\u016f\55\0\1\u0170\64\0\1\u0171\50\0\1\u0172\53\0"+
    "\1\u0173\52\0\1\u0174\60\0\1\u0175\21\0\16\41\1\0"+
    "\15\41\1\u0176\37\41\1\0\17\41\1\u0177\35\41\1\0"+
    "\20\41\1\u0178\34\41\1\0\6\41\2\u0179\17\41\1\u017a"+
    "\25\41\1\0\17\41\1\u017b\35\41\1\0\17\41\1\u017c"+
    "\35\41\1\0\15\41\1\u017d\37\41\1\0\15\41\1\u017e"+
    "\37\41\1\0\24\41\1\u017f\30\41\1\0\17\41\1\u0180"+
    "\35\41\1\0\15\41\1\u0181\37\41\1\0\12\41\1\u0182"+
    "\42\41\1\0\15\41\1\u0183\21\41\32\0\1\u0184\64\0"+
    "\1\u0185\54\0\1\u0186\54\0\1\u0187\43\0\2\u0188\57\0"+
    "\1\u0189\57\0\1\u018a\64\0\1\u018b\47\0\1\u018c\22\0"+
    "\16\41\1\0\13\41\1\u018d\41\41\1\0\22\41\1\u018e"+
    "\32\41\1\0\21\41\1\u018f\33\41\1\0\20\41\1\u0190"+
    "\34\41\1\0\6\41\2\u0191\45\41\1\0\11\41\1\u0192"+
    "\43\41\1\0\13\41\1\u0193\41\41\1\0\22\41\1\u0194"+
    "\32\41\1\0\14\41\1\u0195\22\41\25\0\2\u0196\54\0"+
    "\2\u0197\54\0\2\u0198\66\0\1\u0199\50\0\1\u019a\54\0"+
    "\1\u019b\55\0\1\u019c\55\0\1\u019d\24\0\16\41\1\0"+
    "\6\41\2\u019e\45\41\1\0\6\41\2\u019f\45\41\1\0"+
    "\6\41\2\u01a0\45\41\1\0\20\41\1\u01a1\34\41\1\0"+
    "\13\41\1\u01a2\41\41\1\0\12\41\1\u01a3\42\41\1\0"+
    "\12\41\1\u01a4\42\41\1\0\12\41\1\u01a5\24\41\34\0"+
    "\1\u01a6\55\0\1\u01a7\61\0\1\u01a8\51\0\1\u01a9\52\0"+
    "\1\u01aa\56\0\1\u01ab\67\0\2\u01ac\10\0\16\41\1\0"+
    "\15\41\1\u01ad\37\41\1\0\15\41\1\u01ae\37\41\1\0"+
    "\21\41\1\u01af\33\41\1\0\15\41\1\u01b0\37\41\1\0"+
    "\12\41\1\u01b1\42\41\1\0\13\41\1\u01b2\41\41\1\0"+
    "\25\41\2\u01b3\10\41\25\0\2\u01b4\72\0\1\u01b5\53\0"+
    "\1\u01b6\14\0\16\41\1\0\6\41\2\u01b7\45\41\1\0"+
    "\24\41\1\u01b8\30\41\1\0\22\41\1\u01b9\14\41\34\0"+
    "\1\u01ba\70\0\1\u01bb\6\0\16\41\1\0\15\41\1\u01bc"+
    "\37\41\1\0\30\41\1\u01bd\6\41\43\0\1\u01be\52\0"+
    "\1\u01bf\15\0\16\41\1\0\24\41\1\u01c0\30\41\1\0"+
    "\21\41\1\u01c1\15\41\40\0\1\u01c2\15\0\16\41\1\0"+
    "\21\41\1\u01c3\15\41\25\0\2\u01c4\27\0\16\41\1\0"+
    "\6\41\2\u01c5\27\41\31\0\1\u01c6\24\0\16\41\1\0"+
    "\12\41\1\u01c7\24\41\37\0\1\u01c8\16\0\16\41\1\0"+
    "\20\41\1\u01c9\16\41";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16652];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\5\1\2\11\21\1\1\11"+
    "\36\1\5\0\1\1\1\0\1\1\3\0\1\11\30\0"+
    "\42\1\3\0\3\1\10\0\1\11\24\0\45\1\7\0"+
    "\1\11\1\0\1\11\3\0\1\11\11\0\1\11\6\0"+
    "\41\1\2\0\1\1\5\0\2\11\11\0\1\11\3\0"+
    "\1\11\1\0\2\11\35\1\1\0\2\11\2\0\1\1"+
    "\3\0\2\11\6\0\1\11\23\1\7\0\3\11\1\0"+
    "\2\11\1\0\16\1\1\11\10\0\11\1\5\0\1\11"+
    "\2\0\10\1\2\11\3\0\2\11\7\1\1\0\1\11"+
    "\1\0\3\1\2\0\2\1\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[457];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private String cadena = "";

    /**
    * Retorna el simbolo con sym.value
    * Con la linea, columna y texto de flex
    */
    private Symbol symbol(int value){
        return new Symbol(value, yyline, yychar, yytext());
    }

    /**
    * Retorna el simbolo con sym.id y valor asignado
    * Con la linea, columna de flex
    */
    private Symbol symbol(int id, Object value){
        return new Symbol(id, yyline, yychar, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_gxml(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            }
          case 48: break;
          case 2: 
            { /*ignorar*/
            }
          case 49: break;
          case 3: 
            { return symbol(sym.slash);
            }
          case 50: break;
          case 4: 
            { yychar = 1;
            }
          case 51: break;
          case 5: 
            { return symbol(sym.entero);
            }
          case 52: break;
          case 6: 
            { return symbol(sym.may);
            }
          case 53: break;
          case 7: 
            { return symbol(sym.men);
            }
          case 54: break;
          case 8: 
            { return symbol(sym.pr_x);
            }
          case 55: break;
          case 9: 
            { return symbol(sym.igual);
            }
          case 56: break;
          case 10: 
            { return symbol(sym.pr_y);
            }
          case 57: break;
          case 11: 
            { cadena+=String.valueOf(yytext());
            }
          case 58: break;
          case 12: 
            { return symbol(sym.cadena);
            }
          case 59: break;
          case 13: 
            { return symbol(sym.pr_id);
            }
          case 60: break;
          case 14: 
            { return symbol(sym.llfuncion);
            }
          case 61: break;
          case 15: 
            { return symbol(sym.decimal);
            }
          case 62: break;
          case 16: 
            { return symbol(sym.pr_tam);
            }
          case 63: break;
          case 17: 
            { return symbol(sym.ruta);
            }
          case 64: break;
          case 18: 
            { return symbol(sym.pr_path);
            }
          case 65: break;
          case 19: 
            { return symbol(sym.pr_tipo);
            }
          case 66: break;
          case 20: 
            { return symbol(sym.pr_alto);
            }
          case 67: break;
          case 21: 
            { return symbol(sym.pr_dato);
            }
          case 68: break;
          case 22: 
            { return symbol(sym.pr_texto);
            }
          case 69: break;
          case 23: 
            { return symbol(sym.pr_ancho);
            }
          case 70: break;
          case 24: 
            { return symbol(sym.pr_color);
            }
          case 71: break;
          case 25: 
            { return symbol(sym.pr_falso);
            }
          case 72: break;
          case 26: 
            { return symbol(sym.pr_borde);
            }
          case 73: break;
          case 27: 
            { return symbol(sym.pr_boton);
            }
          case 74: break;
          case 28: 
            { return symbol(sym.pr_minimo);
            }
          case 75: break;
          case 29: 
            { return symbol(sym.pr_maximo);
            }
          case 76: break;
          case 30: 
            { return symbol(sym.pr_accion);
            }
          case 77: break;
          case 31: 
            { return symbol(sym.pr_enviar);
            }
          case 78: break;
          case 32: 
            { return symbol(sym.pr_nombre);
            }
          case 79: break;
          case 33: 
            { return symbol(sym.pr_fuente);
            }
          case 80: break;
          case 34: 
            { return symbol(sym.pr_ventana);
            }
          case 81: break;
          case 35: 
            { return symbol(sym.pr_negrita);
            }
          case 82: break;
          case 36: 
            { return symbol(sym.pr_control);
            }
          case 83: break;
          case 37: 
            { return symbol(sym.pr_cursiva);
            }
          case 84: break;
          case 38: 
            { return symbol(sym.pr_defecto);
            }
          case 85: break;
          case 39: 
            { return symbol(sym.pr_importar);
            }
          case 86: break;
          case 40: 
            { return symbol(sym.pr_verdadero);
            }
          case 87: break;
          case 41: 
            { return symbol(sym.pr_multimedia);
            }
          case 88: break;
          case 42: 
            { return symbol(sym.pr_referencia);
            }
          case 89: break;
          case 43: 
            { return symbol(sym.pr_contenedor);
            }
          case 90: break;
          case 44: 
            { return symbol(sym.pr_listadatos);
            }
          case 91: break;
          case 45: 
            { return symbol(sym.pr_accionfinal);
            }
          case 92: break;
          case 46: 
            { return symbol(sym.pr_accioninicial);
            }
          case 93: break;
          case 47: 
            { return symbol(sym.pr_autoreproduccion);
            }
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
