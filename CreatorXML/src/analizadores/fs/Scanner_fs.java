/* The following code was generated by JFlex 1.6.1 */

package analizadores.fs;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/analizadores/fs/Scanner_fs.jflex</tt>
 */
public class Scanner_fs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\4\1\11\1\12\1\10\22\0\1\15\1\67\1\3"+
    "\3\0\1\70\1\5\1\47\1\50\1\14\1\62\1\55\1\63\1\6"+
    "\1\7\12\2\1\56\1\57\1\66\1\60\1\65\1\61\1\0\1\26"+
    "\1\43\1\37\1\25\1\23\1\27\1\44\1\41\1\33\1\46\1\1"+
    "\1\20\1\34\1\16\1\21\1\35\1\45\1\24\1\31\1\36\1\17"+
    "\1\22\1\1\1\42\1\40\1\1\1\53\1\0\1\54\1\64\1\1"+
    "\1\0\1\26\1\43\1\37\1\25\1\23\1\27\1\44\1\41\1\33"+
    "\1\46\1\1\1\20\1\34\1\16\1\21\1\35\1\45\1\24\1\31"+
    "\1\36\1\17\1\22\1\1\1\42\1\40\1\1\1\51\1\13\1\52"+
    "\7\0\1\11\252\0\2\32\115\0\1\30\u1ea8\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\1\1\10\10\2\1\1\1\2\1\1"+
    "\5\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\1\2\0\1\32\1\0\1\32\2\0"+
    "\1\33\1\34\1\35\10\2\1\0\3\2\1\0\1\2"+
    "\1\0\1\36\1\2\1\36\2\0\3\2\1\0\5\2"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\7\1\0\4\2\1\52\2\2"+
    "\1\0\4\2\1\0\3\2\1\0\1\2\2\0\2\2"+
    "\2\0\2\2\1\53\1\2\1\0\3\2\1\0\1\2"+
    "\1\0\1\2\1\7\1\54\5\2\1\0\6\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\2\1\0\1\55\1\2"+
    "\1\55\2\0\2\2\1\0\1\2\1\0\3\2\2\56"+
    "\1\0\6\2\1\0\2\2\1\0\4\2\1\0\1\2"+
    "\1\0\1\2\2\57\1\0\1\2\1\0\1\2\2\0"+
    "\2\2\1\0\1\2\1\0\1\2\2\60\1\2\1\0"+
    "\4\2\1\0\2\2\1\0\2\2\2\61\2\2\1\62"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\2\2\63\2\64\4\2\1\0\4\2\2\65"+
    "\3\2\2\66\1\2\1\0\1\2\1\67\2\2\1\0"+
    "\1\2\2\70\2\71\1\0\1\2\2\0\3\2\1\0"+
    "\4\2\1\0\5\2\1\72\2\2\1\73\1\0\1\2"+
    "\1\74\1\75\1\0\1\2\1\0\1\2\1\76\1\77"+
    "\1\76\1\77\1\2\1\0\2\2\1\0\3\2\1\0"+
    "\6\2\1\100\1\0\1\2\1\0\1\2\1\0\2\2"+
    "\1\0\2\2\1\0\3\2\1\0\6\2\1\0\1\2"+
    "\1\0\1\2\2\101\2\102\1\2\2\103\1\2\1\0"+
    "\3\2\1\0\1\2\1\104\3\2\1\105\2\2\2\106"+
    "\2\107\2\2\1\0\3\2\2\110\5\2\1\111\1\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\5\2"+
    "\1\0\2\2\1\0\1\2\1\112\1\0\3\2\1\113"+
    "\1\2\1\0\2\2\1\0\1\2\1\0\1\2\1\114"+
    "\1\2\1\115\1\0\1\2\1\116\2\117\1\0\2\2"+
    "\1\0\1\2\1\0\2\2\2\120\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\121"+
    "\1\0\1\2\2\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\u011d\0\71"+
    "\0\u0156\0\71\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0591\0\71\0\u05ca"+
    "\0\u0603\0\71\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\344"+
    "\0\344\0\u011d\0\u011d\0\u0759\0\u0792\0\71\0\71\0\71"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\u0720"+
    "\0\u0759\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\162\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\162\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u0792\0\162"+
    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\71\0\u1a7f\0\162\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\71\0\162\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\71\0\162"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\71\0\162\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\71\0\162\0\u2685\0\u26be\0\162\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\71\0\162\0\71\0\162\0\u29a3"+
    "\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\71\0\162\0\u2ba4\0\u2bdd\0\u2c16\0\71\0\162\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\162\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\71"+
    "\0\162\0\71\0\162\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2"+
    "\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\162\0\u31e0\0\u3219"+
    "\0\162\0\u3252\0\u328b\0\162\0\162\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\71\0\71\0\162\0\162\0\u33a8\0\u33e1\0\u341a"+
    "\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2"+
    "\0\u361b\0\u3654\0\u368d\0\u36c6\0\162\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\71\0\162"+
    "\0\71\0\162\0\u3c90\0\71\0\162\0\u3cc9\0\u3d02\0\u3d3b"+
    "\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\162\0\u3e58\0\u3e91\0\u3eca"+
    "\0\162\0\u3f03\0\u3f3c\0\71\0\162\0\71\0\162\0\u3f75"+
    "\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\71\0\162\0\u40cb"+
    "\0\u4104\0\u413d\0\u4176\0\u41af\0\162\0\u41e8\0\u4221\0\u425a"+
    "\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422"+
    "\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea"+
    "\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740\0\u4779\0\162"+
    "\0\u47b2\0\u47eb\0\u4824\0\u485d\0\162\0\u4896\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\162\0\u4a5e\0\162"+
    "\0\u4a97\0\u4ad0\0\162\0\71\0\162\0\u4b09\0\u4b42\0\u4b7b"+
    "\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\71\0\162\0\u4cd1"+
    "\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99"+
    "\0\u4ed2\0\71\0\162\0\u4f0b\0\u4f44\0\71\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\0\1\12\1\13\1\14\1\12\1\15\1\3"+
    "\1\16\1\17\1\20\1\3\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\3\1\32\1\33"+
    "\3\3\1\34\3\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\72\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\14\3\24\0\1\4\3\0"+
    "\1\57\62\0\3\60\1\61\1\0\64\60\4\62\1\0"+
    "\1\63\63\62\7\0\1\64\4\0\1\65\43\0\1\66"+
    "\23\0\1\67\135\0\1\70\11\0\2\3\13\0\1\3"+
    "\1\71\10\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\5\3\1\72\4\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\10\3"+
    "\1\73\3\3\23\0\2\3\13\0\5\3\1\74\2\3"+
    "\1\75\1\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\5\3\1\76\4\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\5\3\1\77\4\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\2\3\1\100\7\3"+
    "\1\101\1\102\1\0\14\3\23\0\2\3\13\0\1\3"+
    "\1\103\6\3\1\104\1\3\1\0\1\3\1\105\1\106"+
    "\13\3\45\0\1\107\6\0\2\110\36\0\2\3\13\0"+
    "\5\3\1\111\4\3\1\0\1\3\1\110\1\112\13\3"+
    "\40\0\1\113\15\0\1\114\35\0\2\3\13\0\1\115"+
    "\11\3\1\0\1\3\1\0\1\3\1\116\12\3\23\0"+
    "\2\3\13\0\10\3\1\117\1\3\1\0\1\3\1\120"+
    "\1\121\13\3\23\0\2\3\13\0\3\3\1\122\6\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\6\3"+
    "\1\123\1\3\1\124\1\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\1\3\1\125\10\3\1\0\1\3"+
    "\1\0\14\3\102\0\1\126\4\0\1\127\63\0\1\130"+
    "\1\0\1\131\66\0\1\132\2\0\1\133\65\0\1\134"+
    "\70\0\1\135\70\0\1\136\100\0\1\137\2\0\1\140"+
    "\66\0\4\64\1\12\3\64\1\12\2\0\1\141\55\64"+
    "\4\65\1\0\3\65\3\0\1\65\1\142\54\65\1\0"+
    "\2\3\13\0\2\3\1\143\7\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\5\3\1\144\4\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\3\3\1\145\10\3\23\0\2\3\13\0"+
    "\6\3\1\146\3\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\6\3\1\147\3\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\7\3\1\150\2\3\1\0"+
    "\1\3\1\0\3\3\1\151\10\3\23\0\2\3\13\0"+
    "\12\3\1\152\1\153\1\0\3\3\1\154\10\3\23\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\4\3\1\155"+
    "\4\3\1\156\2\3\61\0\1\157\32\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\4\3\1\160\7\3\23\0"+
    "\2\3\13\0\1\161\11\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\2\3\1\162\7\3\1\0\1\3"+
    "\1\0\14\3\42\0\1\163\51\0\2\3\13\0\2\3"+
    "\1\164\7\3\1\0\1\3\1\0\14\3\42\0\1\165"+
    "\66\0\1\166\53\0\2\3\13\0\2\3\1\167\7\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\1\170"+
    "\11\3\1\0\1\3\1\0\14\3\44\0\1\171\103\0"+
    "\1\172\34\0\2\3\13\0\4\3\1\173\5\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\2\3\1\174\11\3\23\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\2\3\1\175\4\3\1\176"+
    "\4\3\40\0\1\177\53\0\2\3\13\0\1\200\11\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\7\3"+
    "\1\201\2\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\5\3\1\202\4\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\12\3\1\203\1\204\1\0\14\3"+
    "\23\0\2\3\13\0\12\3\1\205\1\206\1\0\14\3"+
    "\22\0\4\65\1\0\2\65\1\207\3\0\1\65\1\142"+
    "\54\65\1\0\2\3\13\0\3\3\1\210\6\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\6\3\1\211"+
    "\3\3\1\0\1\3\1\0\14\3\23\0\2\3\13\0"+
    "\5\3\1\212\4\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\7\3\1\213\2\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\1\3\1\214\10\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\3\3\1\215"+
    "\6\3\1\0\1\3\1\0\14\3\61\0\1\216\32\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\4\3\1\217"+
    "\7\3\23\0\2\3\13\0\5\3\1\220\4\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\2\3\1\221"+
    "\2\3\1\222\2\3\1\223\1\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\1\3\1\224\10\3\1\0"+
    "\1\3\1\0\14\3\45\0\1\225\46\0\2\3\13\0"+
    "\5\3\1\226\4\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\4\3\1\227"+
    "\7\3\23\0\2\3\13\0\12\3\1\230\1\231\1\0"+
    "\14\3\60\0\1\232\33\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\3\3\1\233\10\3\45\0\1\234\66\0"+
    "\1\235\50\0\2\3\13\0\5\3\1\236\4\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\3\3\1\237"+
    "\6\3\1\0\1\3\1\0\14\3\45\0\1\240\66\0"+
    "\1\241\50\0\2\3\13\0\5\3\1\242\4\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\3\3\1\243"+
    "\6\3\1\0\1\3\1\0\14\3\23\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\244\1\245\13\3\54\0\2\246"+
    "\36\0\2\3\13\0\12\3\1\0\1\3\1\246\1\247"+
    "\13\3\23\0\2\3\13\0\3\3\1\250\6\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\10\3\1\251"+
    "\1\3\1\0\1\3\1\0\14\3\43\0\1\252\50\0"+
    "\2\3\13\0\3\3\1\253\6\3\1\0\1\3\1\0"+
    "\14\3\61\0\1\254\32\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\4\3\1\255\7\3\23\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\11\3\1\256\2\3\23\0"+
    "\2\3\13\0\1\257\11\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\10\3\1\260\1\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\4\3\1\261\7\3\23\0\2\3\13\0\6\3"+
    "\1\262\3\3\1\0\1\3\1\0\14\3\45\0\1\263"+
    "\46\0\2\3\13\0\5\3\1\264\4\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\1\265\11\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\266\1\267\13\3\23\0\2\3\13\0\6\3"+
    "\1\270\3\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\6\3\1\271\3\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\1\272\11\3\1\0\1\3\1\0"+
    "\14\3\40\0\1\273\53\0\2\3\13\0\1\274\11\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\275\1\276\13\3\43\0\1\277\50\0"+
    "\2\3\13\0\3\3\1\300\6\3\1\0\1\3\1\0"+
    "\14\3\46\0\1\301\45\0\2\3\13\0\6\3\1\302"+
    "\3\3\1\0\1\3\1\0\14\3\61\0\1\303\32\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\4\3\1\304"+
    "\7\3\46\0\1\305\70\0\1\306\45\0\2\3\13\0"+
    "\6\3\1\307\3\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\6\3\1\310\3\3\1\0\1\3\1\0"+
    "\14\3\56\0\1\311\35\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\1\3\1\312\12\3\56\0\1\313\35\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\1\3\1\314"+
    "\12\3\23\0\2\3\13\0\12\3\1\315\1\316\1\0"+
    "\14\3\23\0\2\3\13\0\6\3\1\317\3\3\1\0"+
    "\1\3\1\0\14\3\50\0\1\320\43\0\2\3\13\0"+
    "\10\3\1\321\1\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\7\3\1\322"+
    "\4\3\23\0\2\3\13\0\5\3\1\323\4\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\7\3\1\324"+
    "\2\3\1\0\1\3\1\0\14\3\23\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\325\1\326\13\3\23\0\2\3"+
    "\13\0\1\327\11\3\1\0\1\3\1\0\14\3\40\0"+
    "\1\330\53\0\2\3\13\0\1\331\11\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\5\3\1\332\4\3"+
    "\1\0\1\3\1\0\14\3\61\0\1\333\32\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\4\3\1\334\7\3"+
    "\23\0\2\3\13\0\6\3\1\335\3\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\11\3\1\336\2\3\23\0\2\3\13\0\3\3"+
    "\1\337\6\3\1\0\1\3\1\0\14\3\47\0\1\340"+
    "\44\0\2\3\13\0\7\3\1\341\2\3\1\0\1\3"+
    "\1\0\14\3\43\0\1\342\50\0\2\3\13\0\3\3"+
    "\1\343\6\3\1\0\1\3\1\0\14\3\50\0\1\344"+
    "\43\0\2\3\13\0\10\3\1\345\1\3\1\0\1\3"+
    "\1\0\14\3\61\0\1\346\32\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\0\4\3\1\347\7\3\60\0\1\350"+
    "\70\0\1\351\33\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\3\3\1\352\10\3\23\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\0\3\3\1\353\10\3\43\0\1\354"+
    "\50\0\2\3\13\0\3\3\1\355\6\3\1\0\1\3"+
    "\1\0\14\3\43\0\1\356\50\0\2\3\13\0\3\3"+
    "\1\357\6\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\4\3\1\360\1\3\1\361\1\362\1\363\1\3"+
    "\1\0\1\3\1\364\1\365\2\3\1\366\1\367\3\3"+
    "\1\370\3\3\46\0\1\371\45\0\2\3\13\0\6\3"+
    "\1\372\3\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\1\3\1\373\12\3"+
    "\23\0\2\3\13\0\6\3\1\374\3\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\5\3\1\375\4\3"+
    "\1\0\1\3\1\0\14\3\46\0\1\376\45\0\2\3"+
    "\13\0\6\3\1\377\3\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\10\3\1\u0100\1\3\1\0\1\3"+
    "\1\0\14\3\47\0\1\u0101\44\0\2\3\13\0\7\3"+
    "\1\u0102\2\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\6\3\1\u0103\3\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\10\3\1\u0104\1\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\10\3\1\u0105\1\3"+
    "\1\0\1\3\1\0\14\3\45\0\1\u0106\46\0\2\3"+
    "\13\0\5\3\1\u0107\4\3\1\0\1\3\1\0\14\3"+
    "\40\0\1\u0108\53\0\2\3\13\0\1\u0109\11\3\1\0"+
    "\1\3\1\0\14\3\46\0\1\u010a\45\0\2\3\13\0"+
    "\6\3\1\u010b\3\3\1\0\1\3\1\0\14\3\54\0"+
    "\2\u010c\36\0\2\3\13\0\12\3\1\0\1\3\1\u010c"+
    "\1\u010d\13\3\54\0\2\u010e\63\0\1\u010f\43\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\u010e\1\u0110\13\3\23\0"+
    "\2\3\13\0\10\3\1\u0111\1\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\5\3\1\u0112\4\3\1\0"+
    "\1\3\1\u0113\1\u0114\13\3\23\0\2\3\13\0\5\3"+
    "\1\u0115\4\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\5\3\1\u0116\4\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\6\3\1\u0117\3\3\1\0\1\3"+
    "\1\0\14\3\56\0\1\u0118\35\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\0\1\3\1\u0119\12\3\23\0\2\3"+
    "\13\0\5\3\1\u011a\4\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\3\3\1\u011b\4\3\1\u011c\1\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\3\3"+
    "\1\u011d\6\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\2\3\1\u011e\7\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\2\3"+
    "\1\u011f\11\3\23\0\2\3\13\0\6\3\1\u0120\3\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\6\3"+
    "\1\u0121\3\3\1\0\1\3\1\0\14\3\45\0\1\u0122"+
    "\46\0\2\3\13\0\5\3\1\u0123\4\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\6\3\1\u0124\3\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\6\3"+
    "\1\u0125\3\3\1\0\1\3\1\0\14\3\40\0\1\u0126"+
    "\53\0\2\3\13\0\1\u0127\11\3\1\0\1\3\1\0"+
    "\14\3\43\0\1\u0128\50\0\2\3\13\0\3\3\1\u0129"+
    "\6\3\1\0\1\3\1\0\14\3\46\0\1\u012a\70\0"+
    "\1\u012b\45\0\2\3\13\0\6\3\1\u012c\3\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\6\3\1\u012d"+
    "\3\3\1\0\1\3\1\0\14\3\23\0\2\3\13\0"+
    "\1\u012e\11\3\1\0\1\3\1\0\14\3\47\0\1\u012f"+
    "\44\0\2\3\13\0\7\3\1\u0130\2\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\2\3\1\u0131\11\3\23\0\2\3\13\0\12\3"+
    "\1\u0132\1\u0133\1\0\14\3\23\0\2\3\13\0\5\3"+
    "\1\u0134\1\u0135\3\3\1\0\1\3\1\0\14\3\50\0"+
    "\1\u0136\43\0\2\3\13\0\10\3\1\u0137\1\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\7\3\1\u0138\4\3\23\0\2\3\13\0"+
    "\1\u0139\11\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\13\3\1\u013a\23\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\3\3\1\u013b"+
    "\10\3\23\0\2\3\13\0\3\3\1\u013c\6\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\3\3\1\u013d"+
    "\6\3\1\0\1\3\1\0\14\3\40\0\1\u013e\53\0"+
    "\2\3\13\0\1\u013f\11\3\1\0\1\3\1\0\14\3"+
    "\60\0\1\u0140\33\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\3\3\1\u0141\10\3\40\0\1\u0142\53\0\2\3"+
    "\13\0\1\u0143\11\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\12\3\1\0\1\3\1\0\3\3\1\u0144"+
    "\10\3\45\0\1\u0145\46\0\2\3\13\0\5\3\1\u0146"+
    "\4\3\1\0\1\3\1\0\14\3\23\0\2\3\13\0"+
    "\6\3\1\u0147\3\3\1\0\1\3\1\0\14\3\57\0"+
    "\1\u0148\34\0\2\3\13\0\12\3\1\0\1\3\1\0"+
    "\2\3\1\u0149\11\3\23\0\2\3\13\0\10\3\1\u014a"+
    "\1\3\1\0\1\3\1\0\14\3\23\0\2\3\13\0"+
    "\10\3\1\u014b\1\3\1\0\1\3\1\0\14\3\66\0"+
    "\1\u014c\25\0\2\3\13\0\12\3\1\0\1\3\1\0"+
    "\11\3\1\u014d\2\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\3\3\1\u014e\10\3\23\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\3\3\1\u014f\10\3\23\0"+
    "\2\3\13\0\10\3\1\u0150\1\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\3\3\1\u0151\6\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\6\3\1\u0152"+
    "\3\3\1\0\1\3\1\u0153\1\u0154\13\3\60\0\1\u0155"+
    "\33\0\2\3\13\0\12\3\1\0\1\3\1\0\3\3"+
    "\1\u0156\10\3\45\0\1\u0157\46\0\2\3\13\0\5\3"+
    "\1\u0158\4\3\1\0\1\3\1\0\14\3\50\0\1\u0159"+
    "\43\0\2\3\13\0\10\3\1\u015a\1\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\10\3\1\u015b\1\3"+
    "\1\0\1\3\1\0\14\3\43\0\1\u015c\50\0\2\3"+
    "\13\0\3\3\1\u015d\6\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\3\3\1\u015e\6\3\1\0\1\3"+
    "\1\0\14\3\42\0\1\u015f\51\0\2\3\13\0\2\3"+
    "\1\u0160\7\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\3\3\1\u0161\10\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\5\3"+
    "\1\u0162\6\3\45\0\1\u0163\46\0\2\3\13\0\5\3"+
    "\1\u0164\4\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\3\3\1\u0165\6\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\5\3\1\u0166\1\u0167\3\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\3\3\1\u0168\10\3\23\0\2\3\13\0"+
    "\1\u0169\11\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\1\u016a\4\3\1\u016b\4\3\1\0\1\3\1\0"+
    "\14\3\47\0\1\u016c\44\0\2\3\13\0\7\3\1\u016d"+
    "\2\3\1\0\1\3\1\0\14\3\45\0\1\u016e\46\0"+
    "\2\3\13\0\5\3\1\u016f\4\3\1\0\1\3\1\0"+
    "\14\3\23\0\2\3\13\0\1\u0170\11\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\7\3\1\u0171\2\3"+
    "\1\0\1\3\1\0\14\3\45\0\1\u0172\46\0\2\3"+
    "\13\0\5\3\1\u0173\4\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\5\3\1\u0174\4\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\7\3\1\u0175\2\3"+
    "\1\0\1\3\1\0\14\3\40\0\1\u0176\53\0\2\3"+
    "\13\0\1\u0177\11\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\1\u0178\11\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\3\3\1\u0179\6\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\5\3\1\u017a\4\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\3\3"+
    "\1\u017b\6\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\3\3\1\u017c\10\3"+
    "\23\0\2\3\13\0\10\3\1\u017d\1\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\1\3\1\u017e\10\3"+
    "\1\0\1\3\1\0\14\3\66\0\1\u017f\25\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\11\3\1\u0180\2\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\7\3"+
    "\1\u0181\4\3\23\0\2\3\13\0\5\3\1\u0182\4\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\5\3"+
    "\1\u0183\4\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\2\3\1\u0184\7\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\7\3"+
    "\1\u0185\4\3\23\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\1\3\1\u0186\12\3\23\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\u0187\1\u0188\13\3\23\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\4\3\1\u0189\7\3\50\0"+
    "\1\u018a\43\0\2\3\13\0\10\3\1\u018b\1\3\1\0"+
    "\1\3\1\0\14\3\23\0\2\3\13\0\12\3\1\0"+
    "\1\3\1\0\3\3\1\u018c\10\3\23\0\2\3\13\0"+
    "\12\3\1\u018d\1\u018e\1\0\14\3\23\0\2\3\13\0"+
    "\7\3\1\u018f\2\3\1\0\1\3\1\0\14\3\23\0"+
    "\2\3\13\0\1\u0190\11\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\3\3"+
    "\1\u0191\10\3\23\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\10\3\1\u0192\3\3\67\0\1\u0193\24\0\2\3"+
    "\13\0\12\3\1\0\1\3\1\0\12\3\1\u0194\1\3"+
    "\23\0\2\3\13\0\12\3\1\0\1\3\1\0\3\3"+
    "\1\u0195\10\3\65\0\1\u0196\26\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\0\10\3\1\u0197\3\3\23\0\2\3"+
    "\13\0\3\3\1\u0198\6\3\1\0\1\3\1\0\14\3"+
    "\47\0\1\u0199\44\0\2\3\13\0\7\3\1\u019a\2\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\3\3"+
    "\1\u019b\6\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\1\3\1\u019c\10\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\3\3\1\u019d\6\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\6\3\1\u019e\3\3"+
    "\1\0\1\3\1\0\14\3\41\0\1\u019f\52\0\2\3"+
    "\13\0\1\3\1\u01a0\10\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\3\3\1\u01a1\6\3\1\0\1\3"+
    "\1\0\14\3\42\0\1\u01a2\51\0\2\3\13\0\2\3"+
    "\1\u01a3\7\3\1\0\1\3\1\0\14\3\45\0\1\u01a4"+
    "\46\0\2\3\13\0\5\3\1\u01a5\4\3\1\0\1\3"+
    "\1\0\14\3\23\0\2\3\13\0\6\3\1\u01a6\3\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\12\3"+
    "\1\0\1\3\1\0\1\3\1\u01a7\12\3\23\0\2\3"+
    "\13\0\5\3\1\u01a8\4\3\1\0\1\3\1\0\14\3"+
    "\45\0\1\u01a9\46\0\2\3\13\0\5\3\1\u01aa\4\3"+
    "\1\0\1\3\1\0\14\3\23\0\2\3\13\0\6\3"+
    "\1\u01ab\3\3\1\0\1\3\1\0\14\3\45\0\1\u01ac"+
    "\46\0\2\3\13\0\5\3\1\u01ad\4\3\1\0\1\3"+
    "\1\0\14\3\50\0\1\u01ae\43\0\2\3\13\0\10\3"+
    "\1\u01af\1\3\1\0\1\3\1\0\14\3\23\0\2\3"+
    "\13\0\5\3\1\u01b0\4\3\1\0\1\3\1\0\14\3"+
    "\60\0\1\u01b1\33\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\0\3\3\1\u01b2\10\3\46\0\1\u01b3\45\0\2\3"+
    "\13\0\6\3\1\u01b4\3\3\1\0\1\3\1\0\14\3"+
    "\23\0\2\3\13\0\6\3\1\u01b5\3\3\1\0\1\3"+
    "\1\0\14\3\50\0\1\u01b6\43\0\2\3\13\0\10\3"+
    "\1\u01b7\1\3\1\0\1\3\1\0\14\3\61\0\1\u01b8"+
    "\32\0\2\3\13\0\12\3\1\0\1\3\1\0\4\3"+
    "\1\u01b9\7\3\23\0\2\3\13\0\12\3\1\0\1\3"+
    "\1\u01ba\1\u01bb\13\3\63\0\1\u01bc\30\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\0\6\3\1\u01bd\5\3\61\0"+
    "\1\u01be\32\0\2\3\13\0\12\3\1\0\1\3\1\0"+
    "\4\3\1\u01bf\7\3\54\0\2\u01c0\36\0\2\3\13\0"+
    "\12\3\1\0\1\3\1\u01c0\1\u01c1\13\3\43\0\1\u01c2"+
    "\50\0\2\3\13\0\3\3\1\u01c3\6\3\1\0\1\3"+
    "\1\0\14\3\44\0\1\u01c4\47\0\2\3\13\0\4\3"+
    "\1\u01c5\5\3\1\0\1\3\1\0\14\3\43\0\1\u01c6"+
    "\50\0\2\3\13\0\3\3\1\u01c7\6\3\1\0\1\3"+
    "\1\0\14\3\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20349];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\22\1\11\11\1\1\1\11\2\1\1\11\4\1\2\0"+
    "\1\1\1\0\1\1\2\0\3\11\10\1\1\0\3\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\1\0\5\1"+
    "\12\11\2\1\1\0\7\1\1\0\4\1\1\0\3\1"+
    "\1\0\1\1\2\0\2\1\2\0\4\1\1\0\3\1"+
    "\1\0\1\1\1\0\10\1\1\0\6\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\2\1\2\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\6\1\1\0\2\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\2\1\1\11\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\11\1\1\1\11\5\1\1\0\4\1\1\11"+
    "\4\1\1\11\2\1\1\0\4\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\2\0\3\1\1\0"+
    "\4\1\1\0\11\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\11\3\1\1\0\2\1\1\0\3\1\1\0"+
    "\7\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\3\1\1\0\6\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\1\0"+
    "\3\1\1\0\10\1\1\11\1\1\1\11\3\1\1\0"+
    "\3\1\1\11\10\1\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\1\0\5\1\1\0\2\1\1\0\2\1\1\0"+
    "\5\1\1\0\2\1\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\11\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /**
    * Retorna el simbolo con sym.value
    * Con la linea, columna y texto de flex
    */
    private Symbol symbol(int value){
        return new Symbol(value, yyline, yychar, yytext());
    }

    /**
    * Retorna el simbolo con sym.id y valor asignado
    * Con la linea, columna de flex
    */
    private Symbol symbol(int id, Object value){
        return new Symbol(id, yyline, yychar, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_fs(java.io.Reader in) {
      yyline = 1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            }
          case 83: break;
          case 2: 
            { return symbol(sym.id);
            }
          case 84: break;
          case 3: 
            { return symbol(sym.entero);
            }
          case 85: break;
          case 4: 
            { yychar=1;
            }
          case 86: break;
          case 5: 
            { return symbol(sym.punto);
            }
          case 87: break;
          case 6: 
            { return symbol(sym.div);
            }
          case 88: break;
          case 7: 
            { /*ignorando*/
            }
          case 89: break;
          case 8: 
            { return symbol(sym.por);
            }
          case 90: break;
          case 9: 
            { return symbol(sym.pari);
            }
          case 91: break;
          case 10: 
            { return symbol(sym.pard);
            }
          case 92: break;
          case 11: 
            { return symbol(sym.llai);
            }
          case 93: break;
          case 12: 
            { return symbol(sym.llad);
            }
          case 94: break;
          case 13: 
            { return symbol(sym.cori);
            }
          case 95: break;
          case 14: 
            { return symbol(sym.cord);
            }
          case 96: break;
          case 15: 
            { return symbol(sym.coma);
            }
          case 97: break;
          case 16: 
            { return symbol(sym.dospuntos);
            }
          case 98: break;
          case 17: 
            { return symbol(sym.ptcoma);
            }
          case 99: break;
          case 18: 
            { return symbol(sym.igual);
            }
          case 100: break;
          case 19: 
            { return symbol(sym.inter);
            }
          case 101: break;
          case 20: 
            { return symbol(sym.mas);
            }
          case 102: break;
          case 21: 
            { return symbol(sym.men);
            }
          case 103: break;
          case 22: 
            { return symbol(sym.pot);
            }
          case 104: break;
          case 23: 
            { return symbol(sym.mayor);
            }
          case 105: break;
          case 24: 
            { return symbol(sym.menor);
            }
          case 106: break;
          case 25: 
            { return symbol(sym.not);
            }
          case 107: break;
          case 26: 
            { return symbol(sym.cadena);
            }
          case 108: break;
          case 27: 
            { return symbol(sym.divigual);
            }
          case 109: break;
          case 28: 
            { return symbol(sym.or);
            }
          case 110: break;
          case 29: 
            { return symbol(sym.porigual);
            }
          case 111: break;
          case 30: 
            { return symbol(sym.pr_si);
            }
          case 112: break;
          case 31: 
            { return symbol(sym.igualigual);
            }
          case 113: break;
          case 32: 
            { return symbol(sym.asigesp);
            }
          case 114: break;
          case 33: 
            { return symbol(sym.masigual);
            }
          case 115: break;
          case 34: 
            { return symbol(sym.masmas);
            }
          case 116: break;
          case 35: 
            { return symbol(sym.menigual);
            }
          case 117: break;
          case 36: 
            { return symbol(sym.menmen);
            }
          case 118: break;
          case 37: 
            { return symbol(sym.mayorigual);
            }
          case 119: break;
          case 38: 
            { return symbol(sym.menorigual);
            }
          case 120: break;
          case 39: 
            { return symbol(sym.diferente);
            }
          case 121: break;
          case 40: 
            { return symbol(sym.and);
            }
          case 122: break;
          case 41: 
            { return symbol(sym.decimal);
            }
          case 123: break;
          case 42: 
            { return symbol(sym.pr_var);
            }
          case 124: break;
          case 43: 
            { return symbol(sym.pr_map);
            }
          case 125: break;
          case 44: 
            { return symbol(sym.pr_nulo);
            }
          case 126: break;
          case 45: 
            { return symbol(sym.pr_sino);
            }
          case 127: break;
          case 46: 
            { return symbol(sym.pr_caso);
            }
          case 128: break;
          case 47: 
            { return symbol(sym.pr_falso);
            }
          case 129: break;
          case 48: 
            { return symbol(sym.pr_todos);
            }
          case 130: break;
          case 49: 
            { return symbol(sym.pr_alclic);
            }
          case 131: break;
          case 50: 
            { return symbol(sym.pr_alguno);
            }
          case 132: break;
          case 51: 
            { return symbol(sym.pr_maximo);
            }
          case 133: break;
          case 52: 
            { return symbol(sym.pr_minimo);
            }
          case 134: break;
          case 53: 
            { return symbol(sym.pr_buscar);
            }
          case 135: break;
          case 54: 
            { return symbol(sym.pr_reducir);
            }
          case 136: break;
          case 55: 
            { return symbol(sym.pr_detener);
            }
          case 137: break;
          case 56: 
            { return symbol(sym.pr_funcion);
            }
          case 138: break;
          case 57: 
            { return symbol(sym.pr_filtrar);
            }
          case 139: break;
          case 58: 
            { return symbol(sym.pr_leergxml);
            }
          case 140: break;
          case 59: 
            { return symbol(sym.pr_retornar);
            }
          case 141: break;
          case 60: 
            { return symbol(sym.pr_alcerrar);
            }
          case 142: break;
          case 61: 
            { return symbol(sym.pr_alcargar);
            }
          case 143: break;
          case 62: 
            { return symbol(sym.pr_invertir);
            }
          case 144: break;
          case 63: 
            { return symbol(sym.pr_importar);
            }
          case 145: break;
          case 64: 
            { return symbol(sym.pr_verdadero);
            }
          case 146: break;
          case 65: 
            { return symbol(sym.pr_ascendente);
            }
          case 147: break;
          case 66: 
            { return symbol(sym.pr_selecciona);
            }
          case 148: break;
          case 67: 
            { return symbol(sym.pr_crearvideo);
            }
          case 149: break;
          case 68: 
            { return symbol(sym.pr_creartexto);
            }
          case 150: break;
          case 69: 
            { return symbol(sym.pr_crearboton);
            }
          case 151: break;
          case 70: 
            { return symbol(sym.pr_obtenerporid);
            }
          case 152: break;
          case 71: 
            { return symbol(sym.pr_descendente);
            }
          case 153: break;
          case 72: 
            { return symbol(sym.pr_crearimagen);
            }
          case 154: break;
          case 73: 
            { return symbol(sym.pr_crearventana);
            }
          case 155: break;
          case 74: 
            { return symbol(sym.pr_crearareatexto);
            }
          case 156: break;
          case 75: 
            { return symbol(sym.pr_crearcajatexto);
            }
          case 157: break;
          case 76: 
            { return symbol(sym.pr_crearcontenedor);
            }
          case 158: break;
          case 77: 
            { return symbol(sym.pr_obtenerpornombre);
            }
          case 159: break;
          case 78: 
            { return symbol(sym.pr_crearreproductor);
            }
          case 160: break;
          case 79: 
            { return symbol(sym.pr_creardesplegable);
            }
          case 161: break;
          case 80: 
            { return symbol(sym.pr_obtenerporetiqueta);
            }
          case 162: break;
          case 81: 
            { return symbol(sym.pr_crearcontrolnumerico);
            }
          case 163: break;
          case 82: 
            { return symbol(sym.pr_creararraydesdearchivo);
            }
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
